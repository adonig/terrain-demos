#define mtrxSize 15

float neighborhoods[mtrxSize*mtrxSize];

void sortNeighborhoods()
{
    for(int i = 1; i < mtrxSize*mtrxSize; i++)
    {
         for (int j=0; j < (mtrxSize*mtrxSize -1); j++)
         {
              if (neighborhoods[j+1] > neighborhoods[j])
              { 
                    float temp = neighborhoods[j];
                    neighborhoods[j] = neighborhoods[j+1];
                    neighborhoods[j+1] = temp;
              }
          }
     }
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;
    vec2 step1 = vec2(1.0) / iResolution.xy;
    
    for (int i = 0; i < mtrxSize*mtrxSize; i++)
    {
        vec4 color = texture2D(iChannel0, uv + vec2(i/mtrxSize, i-mtrxSize*(i/mtrxSize))*step1);
        neighborhoods[i] = (color.r + color.g + color.b)/3.0;
    }
    
    sortNeighborhoods();
    
    fragColor.rgb = vec3(neighborhoods[(mtrxSize*mtrxSize)/2]);
}