sources:
    normals:
        type: Raster
        url: https://terrain-preview.mapzen.com/normal/{z}/{x}/{y}.png
        max_zoom: 15

lights:
    directional1:
        type: directional
        direction: [0.5,-0.7,-0.5]
        diffuse: [1, 1.000, 0.75]
        ambient: [0.2, 0.3, 0.3]

styles: 
    hillshade:
        base: raster
        lighting: false
        raster: normal
        shaders:
            blocks:
                normal: |
                    // median filter take 1
                    // adapted from https://www.shadertoy.com/view/XstGW4
                    const int mtrxSize = 7;

                    vec3 neighborhoods[mtrxSize*mtrxSize];

                    for (int i = 0; i < mtrxSize*mtrxSize; i++) {
                        // normal = sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + vec2(float(i),float(j)))).rgb
                        normal = sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + vec2(i/mtrxSize, i-mtrxSize*(i/mtrxSize)))).rgb;

                        // vec4 color = texture2D(iChannel0, uv + vec2(i/mtrxSize, i-mtrxSize*(i/mtrxSize))*step1);
                        neighborhoods[i] = vec3(normal.r, normal.g, normal.b)/3.0;
                    }

                    // sort the neighborhoods
                    for(int i = 1; i < mtrxSize*mtrxSize; i++) {
                         for (int j=0; j < (mtrxSize*mtrxSize -1); j++) {
                              // if (neighborhoods[j+1] > neighborhoods[j]) { 
                              if (dot(neighborhoods[j+1], neighborhoods[j+1]) > dot(neighborhoods[j], neighborhoods[j])) { 
                                    vec3 temp = neighborhoods[j];
                                    neighborhoods[j] = neighborhoods[j+1];
                                    neighborhoods[j+1] = temp;
                              }
                          }
                     }

                    normal = vec3(neighborhoods[(mtrxSize*mtrxSize)/2]);
                    // normal.z *= .01;
                    // normal = normalize(normal);

                color: |
                    //color.rgb = normal;
                    // color.rgb = normal / 2. + .5;
                    color.rgb = normal * 2.;

layers:
    terrain:
        data: { source: normals, layer: _default }
        draw:
            hillshade:
                order: 0